name: Patch Google Photos with ReVanced

on:
  workflow_dispatch:
    inputs:
      apk_url:
        description: 'Google Photos APK download URL from APK Mirror'
        required: true
        type: string
      cli_version:
        description: 'ReVanced CLI version (leave empty for latest)'
        required: false
        type: string
      patches_version:
        description: 'ReVanced patches version (leave empty for latest)'
        required: false
        type: string

jobs:
  patch:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Get latest ReVanced CLI version
      id: cli_version
      run: |
        if [ -n "${{ inputs.cli_version }}" ]; then
          echo "version=${{ inputs.cli_version }}" >> $GITHUB_OUTPUT
        else
          VERSION=$(curl -s https://api.github.com/repos/ReVanced/revanced-cli/releases/latest | jq -r '.tag_name')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "Using ReVanced CLI version: $VERSION"
    
    - name: Download ReVanced CLI
      run: |
        VERSION="${{ steps.cli_version.outputs.version }}"
        # Remove 'v' prefix from version for filename
        VERSION_NO_V=${VERSION#v}
        echo "Downloading ReVanced CLI version: $VERSION (filename version: $VERSION_NO_V)"
        curl -L -o revanced-cli.jar "https://github.com/ReVanced/revanced-cli/releases/download/$VERSION/revanced-cli-$VERSION_NO_V-all.jar"
        
        # Verify download
        if [ ! -f revanced-cli.jar ] || [ ! -s revanced-cli.jar ]; then
          echo "Error: Failed to download ReVanced CLI"
          exit 1
        fi
        
        echo "‚úÖ ReVanced CLI downloaded successfully"
        ls -la revanced-cli.jar
        file revanced-cli.jar
    
    - name: Get latest ReVanced patches version
      id: patches_version
      run: |
        if [ -n "${{ inputs.patches_version }}" ]; then
          echo "version=${{ inputs.patches_version }}" >> $GITHUB_OUTPUT
        else
          VERSION=$(curl -s https://api.github.com/repos/ReVanced/revanced-patches/releases/latest | jq -r '.tag_name')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "Using ReVanced patches version: $VERSION"
    
    - name: Download ReVanced patches
      run: |
        VERSION="${{ steps.patches_version.outputs.version }}"
        # Remove 'v' prefix from version for filename
        VERSION_NO_V=${VERSION#v}
        echo "Downloading ReVanced patches version: $VERSION (filename version: $VERSION_NO_V)"
        curl -L -o patches.rvp "https://github.com/ReVanced/revanced-patches/releases/download/$VERSION/patches-$VERSION_NO_V.rvp"
        
        # Verify download
        if [ ! -f patches.rvp ] || [ ! -s patches.rvp ]; then
          echo "Error: Failed to download ReVanced patches"
          exit 1
        fi
        
        echo "‚úÖ ReVanced patches downloaded successfully"
        ls -la patches.rvp
    
    - name: Download Google Photos APK
      run: |
        echo "Downloading APK from: ${{ inputs.apk_url }}"
        
        # Download with browser-like headers to bypass anti-bot protection
        curl -L \
             -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
             -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
             -H "Accept-Language: en-US,en;q=0.5" \
             -H "Accept-Encoding: gzip, deflate" \
             -H "Connection: keep-alive" \
             -H "Upgrade-Insecure-Requests: 1" \
             --compressed \
             -o google-photos.apk \
             "${{ inputs.apk_url }}"
        
        # Verify it's actually an APK file, not HTML
        if file google-photos.apk | grep -q "HTML\|text"; then
          echo "‚ö†Ô∏è  First attempt got HTML, trying with wget..."
          
          # Try with wget as fallback
          wget --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
               --header="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
               --header="Accept-Language: en-US,en;q=0.5" \
               --no-check-certificate \
               -O google-photos.apk \
               "${{ inputs.apk_url }}"
          
          # Check again
          if file google-photos.apk | grep -q "HTML\|text"; then
            echo "‚ùå Error: Both curl and wget got HTML instead of APK"
            echo "This means APK Mirror is blocking automated downloads."
            echo ""
            echo "Workaround options:"
            echo "1. Try a different APK source"
            echo "2. Download the APK manually and upload it to your repo"
            echo "3. Use a different APK hosting service"
            echo ""
            echo "File content preview:"
            head -5 google-photos.apk
            exit 1
          fi
        fi
        
        # Verify it's a valid APK
        if ! file google-photos.apk | grep -q "Android package"; then
          echo "‚ùå Error: Downloaded file is not a valid APK"
          file google-photos.apk
          exit 1
        fi
        
        echo "‚úÖ Google Photos APK downloaded successfully"
        ls -la google-photos.apk
        file google-photos.apk
    
    - name: Patch Google Photos APK
      run: |
        echo "Starting patching process..."
        java -jar revanced-cli.jar patch -p patches.rvp -o google-photos-patched.apk google-photos.apk
        echo "Patching completed!"
        ls -la google-photos-patched.*
    
    - name: Upload patched APK
      uses: actions/upload-artifact@v4
      with:
        name: google-photos-revanced-${{ github.run_number }}
        path: |
          google-photos-patched.apk
          google-photos-patched.keystore
        retention-days: 30
    
    - name: Show completion summary
      run: |
        echo "‚úÖ Patching completed successfully!"
        echo "üì± APK Size: $(du -h google-photos-patched.apk | cut -f1)"
        echo "üîó Download the patched APK from the 'Artifacts' section of this workflow run"
        echo "üîë The keystore file is also included for future use"